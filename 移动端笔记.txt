视口：viewport
1.  布局视口  layout（分辨率一般为980px）
2.  视觉视口  visual
3.  理想视口  ideal  
meta视口标签：布局视口宽度和理想视口的宽度一致

物理像素和物理像素比：
PC端页面，1px等于1个物理像素，但移动端不尽相同，

不同屏幕适配多种图片：srcset
img src=...  srcset="地址 2x ，地址 3x"

2倍图：一般手机物理像素比为2:1，所以直接使用图片会被放大两倍，二模糊
解决方法：设计本就大两倍的图，然后手动设置一半的比例，这样就解决问题了


2倍精灵图做法：
1.  在测量工具里吧精灵图等比例缩放为原来的一半
2.  再测量坐标
3.  代码里background-size 也要将精灵图缩放为原来的一半


背景缩放： background-size（）：
 background-size（）可接px  百分比
 background-size（cover）；完全覆盖，但背景可能会显示不全
 background-size（contain）；宽高等比例拉伸，当宽或高之一铺满就不再拉伸，可能会有空白区域

移动端开发方式： 单独制作移动端页面，和响应式页面
单独制作移动端页面：			 

1.  流式布局(百分比布局)  宽度百分比
     通过盒子的宽度设置成百分比来根据屏幕的高度进行伸缩，不受固定像素的影响
     通常也会设置最大宽度和最小宽度来保证盒子内容不会收到影响
     max-wdith最大宽度    min-wdith最小宽度


2.  flex弹性布局（重点）
3.  less+rem+媒体查询布局
4.  混合布局

响应式页面：
1.  媒体查询
2.  bootstarp


移动端css特殊样式：
  /* 清除点击高亮 */
            -webkit-tap-highlight-color: transparent;
            /* 清除浏览器默认外观，才能给按钮和输入框自定义样式 */
            -webkit-appearance: none;
img,a {
                 /* 禁用长按页面时弹出菜单 */
                -webkit-touch-callout: none;
            }


flex弹性布局：

1.  flex-direction：    决定主轴方向
主轴和侧轴两个方向（x轴和y轴），默认x轴
row 默认值    	  从左到右
row-reverse 	  从右到左
column	    	  从上到下
column-reverse   	  从下到上

2.  justify-content:	         设置主轴上子元素的排列方式  （确定好主轴的方向）
flex-start	   默认值    靠近起点排列  
flex-end	    	 靠近终点排列（右边对齐）	
center		 在主轴居中对齐
space-around	 平分剩余空间
space-between	 先两边贴边，再平分剩余空间
space-evenly	 平均分，元素之间缝隙一样大

3.align-items:      设置侧轴上的子元素排列方式（单行），多行没有效果
	            该属性只能控制单行盒子，多行不行
flex-start	       靠近侧轴起点
flex-end	       靠近侧轴终点	
center	       挤在一起居中
strech	       拉伸（默认值）拉伸至与父级一样宽或者高
baseline	       文字基线对齐

4.   align-content:  设置侧轴上的子元素排列方式（多行）  单行没有效果
flex-start	   默认值    从头部开始
flex-end	    	 从侧轴尾部开始排列
center		 在侧轴中间显示
space-around	 子元素在侧轴平分剩余空间
space-between	 子元素在侧轴先两头贴边，再平分剩余空间
strech		 子元素高度平分父元素高度
space-evenly	 平均分，元素之间缝隙一样大


5.  flex-wrap：    设置子元素是否换行
在flex布局中，默认是不换行的，如果装不下会缩小子元素的宽度
nowarp   默认值   不换行
wrap       换行（向下换行）
wrap-reverse   （向上换行）
6.  flex-flow:     设置主轴和是否换行的复合写法   如：
flex-flow: row wrap； x为主轴，换行

flex布局子元素属性：

1.  flex属性定义盒子分配剩余空间，number表示份数
flex：number；    有flex属性又有width，优先flex属性

2.  algin-self    设置单个子元素与其他不同对齐方式
可覆盖algin-items属性；默认auto，表示继承父元素的algin-items属性；没有父元素等同于strech
 algin-self:（ 属性值）；

3.  order：number；  定义子元素的排列顺序
数值越小越靠前，默认是0，因此设置比0小的排在前面

背景渐变：
background: -webkit-linear-gradient(起始方向，颜色1，颜色2);
 background-image: linear-gradient(to right，颜色1，颜色2）
背景渐变必须添加浏览器私有前缀：-webkit-
起始方向可以是 方位名词，度数，默认是top

rem适配布局：

em是相对于自身字体大小  如：
div：font-size：12px   那么10em 就是120px
但em相对于父元素不好控制整体

rem是相对于html元素字体大小  如：
html：font-size：12px，   10rem就是120px
rem的优点： 通过修改html的文字大小来改变页面的元素大小实现整体控制

媒体查询：media query
作用：可以针对不同的屏幕尺寸设置不同的样式
@media mediatype and | not | only （media feature）{}

如：在屏幕上，最大宽度是800px 背景色为粉色
@media  scree and （max-width：800px）{
body {background：pink；}
}
mediatype  媒体类型：
1.  all	  用于所有设备
2.  print	  用于打印机和打印机预览
3.  scree	  用于电脑屏幕，平板电脑，智能手机

and | not | only   关键字
and  	将多个媒体特性连接到一起，相对于 且
not  	排除某个媒体类型，相对于 非  （可以省略）
only  	指定某个特定媒体类型， （可以省略）

media feature  媒体特性 
width  	定义输出设备页面可见区域的宽度
min-width      定义输出设备页面最小可见区域的宽度
max-width     定义输出设备页面最大可见区域的宽度

引入资源：  针对不同的屏幕尺寸调用不同的css文件
最好的引入方式是从小到大引入
 <link rel="stylesheet" media="mediatype and | not | only （media feature）"  href=" css文件名">

Less 是一门css拓展语言，也称为css预处理器，
在css语法的基础上引入了 mixin（混入），运算以及函数功能

混入：share{共同样式}；   可以用于别的样式里，share（）

Less变量：  @变量名：值；
变量名：必须有@前缀；不能包含特殊字符；不能以数字开头，区分大小写

Less嵌套：
子元素的样式直接写到父元素里面就好
如果遇到 伪类，伪元素，交集选择器需要添加 &   否则会有空格，变成后代选择器

less运算：
less 提供了 加减乘除 （+ - * /）算术运算
乘除里：不同单位运算去第一个值的单位
运用除法需要添加（）包含

rem适配方案：
方案1： less  媒体查询  rem
方案2： flexible.js    rem

页面元素的rem值 = 页面元素（px）/ （屏幕宽度  /  划分份数）
页面元素的rem值 = 页面元素（px）/    html font-size 
屏幕宽度  /  划分份数 =  html font-size 的大小



响应式布局：
1.  开发维护和用户体验不好，

设备划分：
PC端：	 >=1200px
小PC： 	 992px  >=   小PC  <  1200px
平板端： 	 768px  >=   小PC  <  992px
手机端：    < 768px

bootstrap使用步骤：
1.  创建文件夹结构
2.  创建HTML骨架结构
3.  引入相关样式文件
4.  书写内容

bootstrap框架的版心容器：
1. container 类  ，定义好了pc，小pc，平板端，手机端的媒体查询样式
2. container-fluid类：流式布局百分百宽度，占据全部视口容器，适合单独做移动端

bootstrap栅格系统：
栅格系统里将container划分成12份

类前缀：
PC端：	 .col-lg-份数
小PC： 	 .col-md-份数
平板端：	 .col-sm-份数
手机端：   .col-xs-份数
如果份数相加等于12，则占满一行，如果小于12则不占满一行，大于12会换行显示

列嵌套： 使用列嵌套最好加1行，row，可以取消父盒子的padding值，高度和父级一样高
注意：md 不是固定的， 看的是在多大的屏幕下切换，如在pc端则是lg

列偏移（.col-md-offset-份数）：  作用，左右分布排列
列排序：.col-md-push-份数  推（向右）		.col-md-pull份数  拉（向左）

响应式工具：  隐藏和显示功能
.hidden-xs 	 在手机端隐藏
.hidden-sm	 在平板端隐藏
.hidden-md	 在小PC隐藏
.hidden-lg	 在pc端隐藏
显示是使用  .visible 
.visible-（lg md sm xs）-inline  		仅在PC端以行内元素显示
.visible- (lg md sm xs)-inline-block	仅在PC端以行内块元素显示
.visible- (lg md sm xs)-block		仅在PC端以块元素显示



vw/vh： PC端不兼容
vw ：viewport width   视口宽度
vh ： viewport height  视口高度   vh一般不使用，一般只用vw
vw/vh都把视口分成100份
1vw = 1/100 视口宽度
 1vh = 1/100 视口高度
例如：当前屏幕是375px  那么1vw就是3.35px

vw/vh和百分比布局的区别：  
百分比是针对父元素来说的，而vw/vh总是针对当前视口

vw/vh使用方法：
1.像素大厨设计图改成2x，单位选择vw


