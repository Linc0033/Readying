渲染引擎：解析HTML与CSS。俗称内核
JS引擎：读取页面中的JavaScript代码，对齐处理后运行，俗称JS解释器

JS的组成：
1.  JavaScript语法（ECMAScript）
2.  页面文档对象模型  （DOM）
3.  浏览器对象模型  (BOM)

JS写法：要么引入外部，要么直接写在内部，不能混合使用
1.  行内式：
如： <input type="button" value="欢迎光临" onclick="alert('hello word')">
以on开头的属性，css推荐用双引号，js推荐用单引号

2. 内嵌式： 写在script里； 如：
<script>
        alert('hello word');
</script>

3, 外链式   script   scr属性里链接js文件
<script src="first.js"></script>

注释：
//  123    单行注释      ctrl+/
 /*   123  */   多行注释   ctrl+shift+ a


输入输出语句：
alert（msg）  浏览器弹出警示框
console.log（msg）  浏览器控制台打印输出信息
prompt（info）  浏览器弹出输入框，用户可以输入
confirm（）    弹出确定框
document.write（‘<h1></h1>’）   将内容输出到body标签，包含标签会将其解析成标签显示

声明变量： let
如： let age = 10;   = 赋值  ，将10赋予变量 age
 console.log (age)   

用户输入弹出：
let myname = prompt('请输入你的名字');
        alert(myname);

数据类型：
JS的变量数据类型是只有程序在运行过程中，根据赋予的值来确定的
JS是动态语言；变量的数据类型可以根据数据的类型变化
如：a = 10 整形 当 a = ‘字符串’ 此时a的数据类型就变成了字符串类型

简单数据类型：
number    数字型：整形值和浮点型
boolean   布尔值类型，true（1） false  （0）
string       字符串类型
undefined       let a；声明变量，但没有给值，此时a = undefined
null      	let a = null；声明变量a为空值
  
infinity （无穷大）
-infinity（无穷小）
NaN ，一个非数值
console.log(isNaN('xxx'))  判断一个字符串不是由纯数字组成，不是纯数字则输出ture  是纯数字则输出FALSE

转义符：
\n	换行
\\	斜杆\
\'  	单引号'
\"	双引号"
\t	table 缩进
\b	空格 

获取字符串长度： length
let str = ‘my name is andy’；
console.log(str.length);    输出字符串长度



转换类型：
转换字符串类型：
1.  toString（）   变量.toString（）
2.  String（）      String（变量）
3.  加号拼接字符串  +'' 

转换成数字类型：
1.  parseInt（）  parseInt得到的是整数，从左到右依次提取整数，(遇到非数字停止)
2.  parseFloat（）parseFloat可以得到小数，从左到右依次提取小数，(遇到非数字停止)
3.  Number（）  只能转换纯数字
4.  利用算数运算 - * /  （减乘除） 

注意：+ += 运算符会优先进行字符串的拼接运算（有字符串的情况下）

转换成布尔值：
Boolean（）
代表空和否定的值会被转换成false，如：0，‘ ’，NaN, null ，undefined
一个数据作为表达式使用时，会触发隐式转换；


前置自增和后置自增的区别：
1.  前置自增 先自加1 在返回原值  原值和i相同
2.  后置自增 先返回原值 再自加1

===  比较值与类型必须完全相同，才返回true
！== 比较值与类型至少有一方面不相同才返回true

逻辑运算符：
&&（and） 与 
|| （or）   或
！ (not)   非

逻辑与，逻辑或的短路运算：
逻辑与前面是false会发生短路；后面的就停止运算了
逻辑或前面是true会发生短路；后面的就停止运算了
当有多个（数字）值或者表达式时，左边的值可以确定结果就停止运算

1.  逻辑与：表达式1&&表达式2
若表达式1为真，返回表达式2；若表达式1为假，返回表达式1

2. 逻辑或
若表达式1为真，返回表达式1；若表达式1为假，返回表达式2

赋值运算符：
num = num + 1 相当于 num++
num = num + 2  num += 2

if else结构：
if ('') {
            alert('')
        } else if （''）{
            alert（''）
        }else {
            alert('')
        }




三元运算符：条件表达式  ？ 表达式1   ： 表达式2；
条件表达式为真，输出表达式1；条件表达式为假，输出表达式2
三元表达式：
如：  let num = 10;
let result = num > 5 ?   '是的'  ： '不是的'

if 和 Switch 的区别：
1.  固定值 或者 判断分支 多时用Switch  ；分支较少 判断范围用 if else
2.  Switch是直接跳到对于的case执行语句，而if else是有几种条件就判断几次

Switch语句     
表达式的值匹配case的执行语句，如果都没匹配上，那么执行default语句
Switch（表达式）{
	case value1：
		执行语句；
		break；
	case value2：
		执行语句2；
		break；
	default：
		执行最后的语句
}
Switch表达式里的值一定要全等与case 里的值
没有写break的话不会跳出循环，而是执行下面的case里的代码块

循环：
1. for循环
for（初始变量；条件表达式；操作表达式）{
}
如：for（let  i= 1；i<=100；i++）{
}

2. while循环
while循环的变量需要提前定义  while（ture）无限循环
while (条件表达式) {
            循环执行语句；
	计数器（i++）
        }
如：
let sum = 0;
let i = 1;
while(i<=100){
 sum += i;
 i++;
}

do while 循环  （do while循环至少执行一次）
do {
      循环体（执行语句）
       计数器（i++）
}while（条件表达式）（判断条件）

如：
do {
            let a = prompt('做我女朋友好不好')
        } while (a != '好') {
     }
先执行一次循环体再判断条件，条件为真继续执行，为假则跳出循环


continue退出本次循环开始下一次循环
break  退出循环，后面的循环也不再执行


数组：
为什么要有数组：
简单数据类型仅能表示一个值，当要存储新的数据时需要覆盖前一个；
而数组可以保存多个数据，并且有新的数据加入时，并不影响原有数据。

创建数组：
1.   let  数组名 = [  ];  里面的数据用逗号分离
2.   let  数组名 = new Array();   如果（）只写了一个数字，是代表长度为n的空数组

数组元素的下表从0开始
获取数组元素方法：console.log(数组名  [ 下表号 ]  );
遍历数组：
let arr = [1, 2, 3.13, 'hello', [3, 2, 1], false]
            // for 遍历数组
        for (i = 0; i < 6; i++) {
            // 数组索引从0开始 所以 i 从0开始
            console.log(arr[i]);
            // 输出的时候 i 当做索引来使用
        }

数组长度：  arr.length;    (数组名.length)
通过修改length的值来新增数组元素，不过新增的元素没给值，所以是undefined

冒泡排序：	可以让数组从大到小排序，或者从小到大
原理：一次比较两个元素，如果顺序错误则互换排序，直到不再需要交换；

函数优点：代码复用，方便修改

定义函数有两种方式：
1.  命名函数：
  function name(形参)  函数名 {
           	 函数体
        }
调用：name（实参）
函数名一般是动词。   调用函数： 函数名（）；

2.  匿名函数：
(fun(形参){代码块})（）；   写好就自调用了。

3.  函数表达式：将匿名函数赋予变量fn2,fn2就变成函数了
let  fn2（这是变量名） = function （）{
	
}
调用： fn2（）；   需要先定义后调用，否则会报错


形参和形参的匹配问题：
1.  实参个数大于形参个数   多的实参不参与函数
2.  实参个数小于形参个数   没有实参接受的形参是则为未定义(undefined) 结果为NaN

函数的返回值：return
function 函数名（）{  
	return  返回的结果；
}
函数名（）；

注意事项：
return返回的值在外部的函数调用处，外部想输出的话需要 let a = fun（）；  log a 
1.  return之后函数不再执行；且只能返回一个值，如果想返回多个值可以使用数组  return【a,b】
2.  如果函数没有写  return 或者return 后没有值，返回的是undefined


arguments ：  函数内置参数，里面存储了所有传递过来的实参
伪数组的特性：
1.  具有数组的length属性
2.  按照索引的方式进行存储
3.  但没有真正数组的一些方法  如 pop（） push（）

JavaScript作用域：
作用域：是变量在某个范围起作用，目的是提高程序的可靠性和减少命名冲突

全局作用域：  整个script标签，或者是一个单独的js文件，
局部作用域：  在函数内部的就是局部作用域，仅在函数内可使用
全局变量：  在全局作用域里定义的变量
局部变量：  在局部作用域里定义的变量， 特殊情况，在局部作用域里没使用let 定义的也是全局变量
js里没有块级作用域：
在全局或局部作用域里的：块级作用域  {  }：if {  }   for {  }    这些里面定义的变量可以在外面调用

作用域链：内部函数（使用变量）访问外部函数的变量，采取的是链式查找，也可以理解为就近原则


函数声明快捷方法：
let a=9, b=9, c=9;
相当于 ： let a=9；let b=9；let c=9;

let  a = b= c = 9;
相当于：  let  a=9;  b=9； c=9;


对象：		对象是由属性和方法组成的

属性：事物的特征，在对象中用属性来表示
方法：事物的行为，在对象中用方法来表示

创建对象的三种方法：  键值对
1. 利用字面量创建对象
  let  obj = {
                uername: '黄梅',
                age: 18,
                sex: '男',
                say: function() {
                    console.log('hello word');

                }
            }
2. 利用new Object创建对象，字面量相当于他的简写
 let  obj = new Object();
        obj.name = 'yun';
        obj.age = 18;
        obj.sex = '男'
        obj.saihay = function() {
            console.log('hello');
        }

调用对象属性：
1.  调用对象的属性：对象名 . 属性名
2.  对象名[' 属性名']；  属性名需要加 ''

调用对象的方法（函数） ：
1. 对象名.方法名（）；

添加修改属性名方法：
对象名.属性名 = ‘’；   不存在的属性则添加，存在则修改

删除属性方法：
delete（对象名.属性名） 

this关键字可以在对象方法内，对成员通过  this . 成员名  进行操作
如： this.name = ‘男’；

in 关键字：
成员名 in 对象 用于判断是对象某个对象的成员是否存在。存在则返回true，不存在返回false。
如：console.log( 'name' in obj) 



构造函数创建对象：
用函数封装对象就叫做 构造函数
结构:   function 构造函数名（）{
	this.属性 = 值；
	this.方法 = function (){
}    }

调用方法：new 构造函数名（）；  let  gfc = new Star('郭富城', 18, '男')
注意点：
1. 构造函数名首字母要大写；
2. 构造函数不需要return  就可以返回结果
3. 创建属性和方法前面要加 this .

new关键字的执行：
1.  在内存中创建一个新的空对象
2.  让this 指向这个对象
3.  指向构造函数的代码，让对象添加属性和方法
4.  返回这个新对象（所以构造函数不需要return）

new工作流程
	a. 创建一个空对象
	b. 将空对象赋值给this
	c. 通过 this.键=值，向对象上添加成员
	d. 函数执行结束时，将对象返回到函数


遍历对象：
for （let k in obj）{ 
	console.log(k);    k是变量，直接输出变量得到的是属性名
	console.log(obj[k]);       obj[k]得到的才是属性值，k是变量不需要加 ' '
}

typeof（变量名）    验证变量数据类型，
检验简单数据类型准确，但对于null 数组， 对象 都返回object


js中对象分为三种。自定义对象，内置对象，浏览器对象
内置对象： js自带的一些对象，这些对象供开发者使用，并提供一些常用的，最基本而必要的功能

Math；Date；Array; String等

Math：方法
Math.PI			圆周率
Math.floor()		向下取整，往小取值
Math.ceil()		向上取整，往大取值
Math.round()		四舍五入   0.5特殊，往大取，如果是-1.5 则取 -1
Math.abs()		绝对值
Math.max()/Math.min	最大最小值
Math.pow(m,n)		m的n次方
Number.isInteger();		判断是不是整数，是输出TRUE
随机数函数：Math.random()；

两个数之间的随机整数：包含着两个数在内
Math.floor(Math.random() * (max - min + 1) + min);

Date日期对象：  （构造函数，必须使用new 来调用创建日期对象）

let date = new Date();     
时间对象.toLocaleDateString()   转换为日期格式  xx年xx日

时间对象.toLocaleTimeString()   转换为时间格式   几点几分几秒

时间对象.toLocaleString()  	   转换为日期时间格式     xx年xx日 几点几分几秒

date.getFullYear())；	获取当前年份
date.getMonth() +1；	获取当前月份，但月份返回是0-11，需要在后面加1
date.getDate()); 		获取当前日期
date.getDay()); 		获取当前星期几 0-6，周日是0
date.getHours（）;		获取当前小时
date.getMinutes（）;	获取当前分钟
date.getSeconds（）;	获取当前秒钟

时间戳：  1970年1月1日开始算起
date.valueOf（）
date.getTime（）
最常用写法：
let date1 = +new Date（）；
log（ date1 ）
H5新增： log（Date.now（））；

时间戳转换成 天 时 分 秒
计算天数：d = parseInt（总秒数/60/60/24）
计算小时：h = parseInt（总秒数/60/60%24）
计算分数：m = parseInt（总秒数/60%60）
计算秒数：s = parseInt（总秒数%60）


数组对象：

检测是否是数组方法：
1.  实例名 instanceof 对象名  检测实例与对象的关系，是的话返回True  不是返回false
2.  Array.isArray(变量名） 是返回true  不是返回false

2.  H5 新增方法  Array.isArray();
 	let arr = [1, 2, 3]
        console.log(arr instanceof Array); //   true
        console.log(Array.isArray(arr)); //     true

数组合并：arr1.concat（arr2）  合并数组

数组的增删改查：
增加：	arr.push（）； 在数组后面增加（）直接写参数   log -arr.push（）返回的是新数组长度
	arr.unshift（）在数组前面增加 （）直接写参数   log -arr.unshift（）返回的是新数组长度

删除：	arr.pop（）； 删除数组最后一个元素（）里没有参数  log.arr.pop（）返回的是删除的元素
	arr.shift（）；删除数组第一个元素  （）里没有参数  log.arr.shift（）返回的是删除的元素

重点：	arr.splice（n1,n2）;    从第 n1 个索引位置开始，删除 n2 个元素


数组的排序：
1.  翻转数组函数：  数组名.reverse()
2.  冒泡排序： 数组名.sort();	
     注意直接使用 .sort();  如果数组里有两位数的会发生错误,他是字符串来排序；
   .sort()的完全版：
  数组名.sort(function(a, b) {	
            return a - b; 	// 升序排列 (小到大)   
            return b - a; 	// 降序排列  (大到小)   
        })

获取数组索引：    搜索数组没有的元素返回 -1 ，只返回第一个满足条件的索引号
1.  数组名.indexOf（‘要查找的字符' ，[起始位置可省略]）;   从头开始查找
2.  数组名.lastIndexOf（要查找的字符' ，[起始位置可省略]）;    从尾部开始查找，

数组转换成字符串：
1.  toString（）  把数组转换成字符串，逗号分隔每一项
2.  join（'分隔符'） 把数组中每个元转换成一个字符串，（）里面可以接任意分隔符


字符串对象：
模板字符串： 反引号创建 ``;	Esc键下面；
功能：
1.  定义字符串时可以换行；
2.  可以解析变量的值；${变量名}

字符串填充：   不是字符串需要用String（）转换
字符串.padStart(长度，填充的内容)       首先判断字符串的长度是否满足要求，不足长度则以填充内容填充



字符串的操作：
1.  拼接：
	字符串名（str）.concat（'字符串1'，'字符串2'......）
2.  截取：
	字符串名(str) . substr（'截取起始位置','截取几个'）  截取几个可省略，默认到最后
3.  替换
	字符串名(str) . replace（'被替换的字符','替换的字符'）   只替换第一个
	字符串名(str) . replaceAll（'被替换的字符','替换的字符'）  替换全部

4.  转换成数组
	字符串名(str) . split（'分隔符'） 分隔符看字符串是用什么分隔，返回的是数组



小知识：
1.  js里会把简单数据类型（number；string；boolean）包装成复杂数据类型，从而可以使用属性和方法；
2.  字符串的不可变性，将另一个字符串赋予变量，他是开辟了另一个，其原来的字符串空间仍然存在，
     所以，不要大量拼接字符串
3.  字符串的所有方法都不会修改字符串本身（不可变性），操作完成返回新字符串

查找字符串元素位置：
1.  数组名.indexOf（‘要查找的字符' ，[起始位置可省略]）;   从头开始查找
2.  数组名.lastIndexOf（要查找的字符' ，[起始位置可省略]）;    从尾部开始查找

根据位置返回字符：
charAt（idnex）     根据index索引号返回字符
str[idnex]	 	 HTML5新增，与charAt等效   根据index索引号返回字符
charCodeAt（index）  根据根据index索引号返回字符返回ASCII码 （判断用户按了什么键）




简单类型（值类型）和复杂类型（引用类型）：
简单类型：在存储时的值是值本身，因此也叫值类型  number string Boolean underfind null
复杂类型：在存储变量中存储的仅仅是地址，因此叫做引用类型  (new创建的关键字，object，Array，Date)

堆和栈：
栈（操作系统）：由操作系统自动分配释放存放函数的 参数值，局部变量等。  
堆（操作系统）：存储复杂类型（对象），一般由程序员分配释放，程序员不释放，由垃圾回收机制回收

简单数据类型存放在栈里，里面直接开辟一个空间，存放的是值
复杂数据类型，首先在栈里存放地址，十六进制表示，然后地址指向堆里的数据
复杂数据类型在栈空间里存放的是地址，真正的对象实例存放在堆空间中


网络传递的JSON（字符串格式）格式：  JSON的本质是格式化严格的字符串
作用： 用于两台计算机之间传递数据
1.  作为发送方需要将数据转成JSON格式。
     JSON自动格式化： JSON.stringify(对象名，数组名)
2.  接收方，将JSON格式翻转
     JSON.parse（JSON字符串）

to(Locale)UpperCase    大写
to(Locale)LowerCase    小写










